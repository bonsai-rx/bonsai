//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Build.Tasks.Git {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GitDataReader.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration file recursion exceeded maximum allowed depth of {0}..
        /// </summary>
        internal static string ConfigurationFileRecursionExceededMaximumAllowedDepth {
            get {
                return ResourceManager.GetString("ConfigurationFileRecursionExceededMaximumAllowedDepth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error parsing config line {0} in file &apos;{1}&apos;: {2}.
        /// </summary>
        internal static string ErrorParsingConfigLineInFile {
            get {
                return ResourceManager.GetString("ErrorParsingConfigLineInFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error reading git repository information: {0}.
        /// </summary>
        internal static string ErrorReadingGitRepositoryInformation {
            get {
                return ResourceManager.GetString("ErrorReadingGitRepositoryInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format of the file &apos;{0}&apos; is invalid..
        /// </summary>
        internal static string FormatOfFileIsInvalid {
            get {
                return ResourceManager.GetString("FormatOfFileIsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Home relative paths are not allowed when {0} is &apos;{1}&apos;: &apos;{2}&apos;..
        /// </summary>
        internal static string HomeRelativePathsAreNotAllowed {
            get {
                return ResourceManager.GetString("HomeRelativePathsAreNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Repository does not have a working directory..
        /// </summary>
        internal static string InvalidFormatOfFileAtPath {
            get {
                return ResourceManager.GetString("InvalidFormatOfFileAtPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid module path: &apos;{0}&apos;..
        /// </summary>
        internal static string InvalidModulePath {
            get {
                return ResourceManager.GetString("InvalidModulePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid reference: &apos;{0}&apos;..
        /// </summary>
        internal static string InvalidReference {
            get {
                return ResourceManager.GetString("InvalidReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL of repository remote &apos;{0}&apos; is invalid: &apos;{1}&apos;..
        /// </summary>
        internal static string InvalidRepositoryRemoteUrl {
            get {
                return ResourceManager.GetString("InvalidRepositoryRemoteUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path of submodule &apos;{0}&apos; is missing or invalid: &apos;{1}&apos;..
        /// </summary>
        internal static string InvalidSubmodulePath {
            get {
                return ResourceManager.GetString("InvalidSubmodulePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL of submodule &apos;{0}&apos; is missing or invalid: &apos;{1}&apos;..
        /// </summary>
        internal static string InvalidSubmoduleUrl {
            get {
                return ResourceManager.GetString("InvalidSubmoduleUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path must be absolute..
        /// </summary>
        internal static string PathMustBeAbsolute {
            get {
                return ResourceManager.GetString("PathMustBeAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path must be a file path..
        /// </summary>
        internal static string PathMustBeFilePath {
            get {
                return ResourceManager.GetString("PathMustBeFilePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path specified in file &apos;{0}&apos; is invalid: &apos;{1}&apos;..
        /// </summary>
        internal static string PathSpecifiedInFileIsInvalid {
            get {
                return ResourceManager.GetString("PathSpecifiedInFileIsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path specified in file &apos;{0}&apos; is not absolute: &apos;{1}&apos;..
        /// </summary>
        internal static string PathSpecifiedInFileIsNotAbsolute {
            get {
                return ResourceManager.GetString("PathSpecifiedInFileIsNotAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recursion detected while resolving reference: &apos;{0}&apos;..
        /// </summary>
        internal static string RecursionDetectedWhileResolvingReference {
            get {
                return ResourceManager.GetString("RecursionDetectedWhileResolvingReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Repository &apos;{0}&apos; does not have the specified remote &apos;{1}&apos;; using &apos;{2}&apos; instead..
        /// </summary>
        internal static string RepositoryDoesNotHaveSpecifiedRemote {
            get {
                return ResourceManager.GetString("RepositoryDoesNotHaveSpecifiedRemote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Repository does not have a working directory..
        /// </summary>
        internal static string RepositoryDoesNotHaveWorkingDirectory {
            get {
                return ResourceManager.GetString("RepositoryDoesNotHaveWorkingDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Repository has no commit..
        /// </summary>
        internal static string RepositoryHasNoCommit {
            get {
                return ResourceManager.GetString("RepositoryHasNoCommit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Repository &apos;{0}&apos; has no remote..
        /// </summary>
        internal static string RepositoryHasNoRemote {
            get {
                return ResourceManager.GetString("RepositoryHasNoRemote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Repository URL evaluation exceeded maximum allowed depth of {0} local repositories..
        /// </summary>
        internal static string RepositoryUrlEvaluationExceededMaximumAllowedDepth {
            get {
                return ResourceManager.GetString("RepositoryUrlEvaluationExceededMaximumAllowedDepth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} The source code won&apos;t be available via Source Link..
        /// </summary>
        internal static string SourceCodeWontBeAvailableViaSourceLink {
            get {
                return ResourceManager.GetString("SourceCodeWontBeAvailableViaSourceLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Submodule &apos;{0}&apos; doesn&apos;t have any commit..
        /// </summary>
        internal static string SubmoduleWithoutCommit {
            get {
                return ResourceManager.GetString("SubmoduleWithoutCommit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to locate repository with working directory that contains directory &apos;{0}&apos;..
        /// </summary>
        internal static string UnableToLocateRepository {
            get {
                return ResourceManager.GetString("UnableToLocateRepository", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected character {0}..
        /// </summary>
        internal static string UnexpectedCharacter {
            get {
                return ResourceManager.GetString("UnexpectedCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected end of file..
        /// </summary>
        internal static string UnexpectedEndOfFile {
            get {
                return ResourceManager.GetString("UnexpectedEndOfFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported repository extension &apos;{0}&apos;. Only {1} are supported..
        /// </summary>
        internal static string UnsupportedRepositoryExtension {
            get {
                return ResourceManager.GetString("UnsupportedRepositoryExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported repository version {0}. Only versions up to {1} are supported..
        /// </summary>
        internal static string UnsupportedRepositoryVersion {
            get {
                return ResourceManager.GetString("UnsupportedRepositoryVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of {0} is not a valid configuration scope: &apos;{1}&apos;..
        /// </summary>
        internal static string ValueOfIsNotValidConfigurationScope {
            get {
                return ResourceManager.GetString("ValueOfIsNotValidConfigurationScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of {0} is not a valid path: &apos;{1}&apos;..
        /// </summary>
        internal static string ValueOfIsNotValidPath {
            get {
                return ResourceManager.GetString("ValueOfIsNotValidPath", resourceCulture);
            }
        }
    }
}
