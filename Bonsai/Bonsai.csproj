<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <Description>The compiler, package manager, and IDE for the Bonsai visual reactive programming language.</Description>
    <PackageTags>Bonsai Rx Reactive Extensions</PackageTags>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
    <TargetFrameworks>net48;net8.0-windows</TargetFrameworks>
    <UseWindowsForms>true</UseWindowsForms>
    <OutputType>Exe</OutputType>
    <DisableWinExeOutputInference>true</DisableWinExeOutputInference>
    <ApplicationIcon>..\Bonsai.Editor\Bonsai.ico</ApplicationIcon>

    <!-- The installer and CI scripts rely on the output path, don't include the target framework in the pivot for the primary target  -->
    <ArtifactsPivots Condition="'$(TargetFramework)' == 'net48'">$(Configuration.ToLowerInvariant())</ArtifactsPivots>
  </PropertyGroup>

  <!-- App.manifest is required in .NETFramework but discouraged in .NETCoreApp see WFAC010 warning -->
  <PropertyGroup Condition="'$(TargetFramework)' == 'net48'">
    <ApplicationManifest>App.manifest</ApplicationManifest>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.Reflection.MetadataLoadContext" Version="8.0.0" PrivateAssets="all" />
    <PackageReference Include="ILRepack" Version="2.0.34">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Bonsai.Core\Bonsai.Core.csproj" />
    <ProjectReference Include="..\Bonsai.Design\Bonsai.Design.csproj" />
    <ProjectReference Include="..\Bonsai.Editor\Bonsai.Editor.csproj" />
    <ProjectReference Include="..\Bonsai.NuGet.Design\Bonsai.NuGet.Design.csproj" PrivateAssets="all" />
    <ProjectReference Include="..\Bonsai.Configuration\Bonsai.Configuration.csproj" PrivateAssets="all" />
  </ItemGroup>
  <ItemGroup>
    <Compile Update="Properties\Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Update="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <!-- Embed System.Resources.Extensions and its dependencies, see Bonsai.SystemResourcesExtensionsSupport -->
  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
    <PackageReference Include="System.Resources.Extensions" Version="8.0.0" GeneratePathProperty="true" PrivateAssets="all" />
    <PackageReference Include="System.Memory" Version="4.5.5" GeneratePathProperty="true" PrivateAssets="all" />
    <PackageReference Include="System.Buffers" Version="4.5.1" GeneratePathProperty="true" PrivateAssets="all" />
    <PackageReference Include="System.Numerics.Vectors" Version="4.5.0" GeneratePathProperty="true" PrivateAssets="all" />
    <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="6.0.0" GeneratePathProperty="true" PrivateAssets="all" />
    <EmbeddedResource Include="$(PkgSystem_Resources_Extensions)/lib/net462/System.Resources.Extensions.dll" Visible="false" />
    <EmbeddedResource Include="$(PkgSystem_Memory)/lib/net461/System.Memory.dll" Visible="false" />
    <EmbeddedResource Include="$(PkgSystem_Buffers)/lib/net461/System.Buffers.dll" Visible="false" />
    <EmbeddedResource Include="$(PkgSystem_Numerics_Vectors)/lib/net46/System.Numerics.Vectors.dll" Visible="false" />
    <EmbeddedResource Include="$(PkgSystem_Runtime_CompilerServices_Unsafe)/lib/net461/System.Runtime.CompilerServices.Unsafe.dll" Visible="false" />
  </ItemGroup>

  <Target Name="NuGetConfig" AfterTargets="Build">
    <WriteLinesToFile File="$(OutputPath)NuGet.config"
                      Lines="$([System.IO.File]::ReadAllText('Properties\NuGet.config').Replace('%PackageDir%','$(PackageOutputPath)'))"
                      Overwrite="true"
                      WriteOnlyWhenDifferent="true" />
  </Target>

  <!-- ================================================================================================================
    IL Repack Infrastructure
  ==================================================================================================================-->
  <Target Name="ConfigureRepack">
    <PropertyGroup>
      <RepackedOutputPath>$(BaseOutputPath)$(ArtifactsPivots)-repacked\</RepackedOutputPath>
      <RepackedOutputFilePath>$(RepackedOutputPath)$(TargetFileName)</RepackedOutputFilePath>
      <RepackedOutputSymbolFilePath>$([System.IO.Path]::ChangeExtension('$(RepackedOutputFilePath)', '.pdb'))</RepackedOutputSymbolFilePath>
    </PropertyGroup>
  </Target>

  <Target Name="Repack" DependsOnTargets="ConfigureRepack">
    <Error Condition="!$([System.OperatingSystem]::IsWindows())" Text="Repacking is only supported on Windows." />
    <Error Condition="!Exists('$(OutputPath)Bonsai.exe')" Text="Project must be built before repacking. '$(OutputPath)Bonsai.exe' not found." />
    <Error Condition="'$(RepackedOutputPath)' == '' or '$(RepackedOutputFilePath)' == ''" Text="Repacked output path not configured." />
    <Error Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'" Text="Repacking is only supported when targeting .NET Framework." />

    <MakeDir Directories="$(RepackedOutputPath)" />

    <PropertyGroup>
      <_IlRepackCommand>
"$(ILRepack)"
/verbose
/out:"$(RepackedOutputFilePath)"
/internalize:"$(MSBuildThisFileDirectory)InternalizeExcludePatterns"
"$(OutputPath)Bonsai.exe"
"$(OutputPath)System.Collections.Immutable.dll"
"$(OutputPath)System.Reflection.Metadata.dll"
"$(OutputPath)System.Reflection.MetadataLoadContext.dll"
"$(OutputPath)Bonsai.Configuration.dll"
"$(OutputPath)Bonsai.NuGet.dll"
"$(OutputPath)Bonsai.NuGet.Design.dll"
"$(OutputPath)Newtonsoft.Json.dll"
"$(OutputPath)NuGet.Common.dll"
"$(OutputPath)NuGet.Configuration.dll"
"$(OutputPath)NuGet.Frameworks.dll"
"$(OutputPath)NuGet.Packaging.dll"
"$(OutputPath)NuGet.Protocol.dll"
"$(OutputPath)NuGet.Resolver.dll"
"$(OutputPath)NuGet.Versioning.dll"
      </_IlRepackCommand>
    </PropertyGroup>
    <Exec WorkingDirectory="$(RepackedOutputPath)" Command="$(_IlRepackCommand.Replace('%0D', ' ').Replace('%0A', ' '))" UseCommandProcessor="false" />
    <Copy SourceFiles="$(TargetDir)NuGet.config" DestinationFolder="$(RepackedOutputPath)" />
  </Target>

  <Target Name="UseRepackOutputForPackage" Condition="'$(UseRepackForBootstrapperPackage)' == 'true' and '$(TargetFrameworkIdentifier)' == '.NETFramework'" AfterTargets="BuiltProjectOutputGroup" DependsOnTargets="ConfigureRepack">
    <Error Condition="!Exists('$(RepackedOutputFilePath)')" Text="Project must be repacked before packing. '$(RepackedOutputFilePath)' not found." />
    <ItemGroup>
      <BuiltProjectOutputGroupOutput Remove="@(BuiltProjectOutputGroupOutput)" />
      <BuiltProjectOutputGroupOutput Include="$(RepackedOutputFilePath)" />
    </ItemGroup>
  </Target>
  <Target Name="UseRepackOutputForSymbolPackage" Condition="'$(UseRepackForBootstrapperPackage)' == 'true' and '$(TargetFrameworkIdentifier)' == '.NETFramework'" AfterTargets="DebugSymbolsProjectOutputGroup" DependsOnTargets="ConfigureRepack">
    <Error Condition="!Exists('$(RepackedOutputSymbolFilePath)')" Text="Project must be repacked before packing. '$(RepackedOutputFilePath)' not found." />
    <ItemGroup>
      <DebugSymbolsProjectOutputGroupOutput Remove="@(DebugSymbolsProjectOutputGroupOutput)" />
      <DebugSymbolsProjectOutputGroupOutput Include="$(RepackedOutputSymbolFilePath)" />
    </ItemGroup>
  </Target>
</Project>